"""
Description:
    1 <= m <= 1,000,000, 1 <= user_id <= 200,000
    채팅방에 최대 유저 수 n이 정해져 있어서 유저가 들어오고 a초 이후에 자리비움 상태가 되고 b초 이후에는 강제 퇴장이 된다.
    새로운 유저가 들어왔을 때 유저가 다 차 있으면 자리비움 상태가 오래 지속된 유저를 퇴장시키고 새로운 유저를 입장시킨다.
    유저 입장 정보: request[m][2]
        request[i] = [time, user_id]
    각 시간에 대해 채팅방에 있는 유저의 수를 구하여라.
Testcase:
    Input: a = 100, b = 200, n = 5, request = [(11, 1), (12, 2), (13, 1), (16, 3), (200, 1), (214, 1), (216, 1)]
    Output: [1, 2, 2, 3, 3, 2, 1]
Status:
    주어진 테스트케이스는 다 맞음
    최적의 솔루션은 아닌 듯. 큰 수에 대해 시간 초과 일어날 것으로 예상.
My Solution:
    각 유저에 대한 마지막 활동 시간을 dict로 저장하고 request에 대해서 해당 시간의 채팅방 정보를 계산
    
    request를 돌면서 
        모든 dict 값을 확인하면서 time 시점에
            b초 지난 유저는 -1로 세팅
            가장 오래 자리 비운 user_id를 구하고
            해당 시간에 있는 유저 정보 tmp를 저장
        
        새로운 유저가 채팅방에 있으면
            dict값 업데이트
            len(tmp)
        채팅방이 다 찼을때
            가장 오래 자리 비운 유저가 있다면
                가장 오래 자리 비운 유저의 dict 값을 -1로 세팅하고 새로운 유저도 값 time으로 업데이트
                n
            없다면
                -1
        채팅방이 다 안 찼을 때 len(tmp)
"""
